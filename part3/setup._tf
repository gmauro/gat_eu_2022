// Upload virtual machine image via API
// comment this block if the image is already available or if you upload it via the dashboard interface
resource "openstack_images_image_v2" "_vgcn-image" {
  name             = var.image["name"]
  image_source_url = var.image["image_source_url"]
  container_format = var.image["container_format"]
  disk_format      = var.image["disk_format"]
}

data "openstack_networking_network_v2" "_external" {
  name = var.public_network
}

// Create private network
// comment these blocks if the network is already available
resource "openstack_networking_network_v2" "_internal" {
  name           = var.private_network["name"]
  admin_state_up = "true"
}

resource "openstack_networking_subnet_v2" "_internal" {
  name        = var.private_network["subnet_name"]
  network_id  = openstack_networking_network_v2._internal.id
  cidr        = var.private_network["cidr4"]
  ip_version  = 4
  enable_dhcp = true
}

// Create a router to ensure the private network will be able to reach the Internet
// comment these blocks if this feature is provided by the network
resource "openstack_networking_router_v2" "router_1" {
  name                = "tf_workshop-router"
  external_network_id = data.openstack_networking_network_v2._external.id
}

resource "openstack_networking_router_interface_v2" "router_interface_1" {
  router_id = openstack_networking_router_v2.router_1.id
  subnet_id = openstack_networking_subnet_v2._internal.id
}

resource "openstack_networking_secgroup_v2" "ingress-private" {
  name                 = "ingress-private"
  description          = "[tf] Allow any incoming connection from private network"
  delete_default_rules = true
}

resource "openstack_networking_secgroup_rule_v2" "ingress-private-4" {
  direction         = "ingress"
  ethertype         = "IPv4"
  remote_ip_prefix  = var.private_network["cidr4"]
  security_group_id = openstack_networking_secgroup_v2.ingress-private.id
}

resource "openstack_networking_secgroup_rule_v2" "ingress-private-6" {
  direction         = "ingress"
  ethertype         = "IPv6"
  security_group_id = openstack_networking_secgroup_v2.ingress-private.id
}

resource "openstack_networking_secgroup_v2" "egress-public" {
  name                 = "egress-public"
  description          = "[tf] Allow any outgoing connection"
  delete_default_rules = true
}

resource "openstack_networking_secgroup_rule_v2" "egress-public-4" {
  direction         = "egress"
  ethertype         = "IPv4"
  security_group_id = openstack_networking_secgroup_v2.egress-public.id
}

resource "openstack_networking_secgroup_rule_v2" "egress-public-6" {
  direction         = "egress"
  ethertype         = "IPv6"
  security_group_id = openstack_networking_secgroup_v2.egress-public.id
}

resource "openstack_networking_secgroup_v2" "public-ssh" {
  name                 = "public-ssh"
  description          = "[tf] Allow SSH connections from anywhere"
  delete_default_rules = "true"
}

resource "openstack_networking_secgroup_rule_v2" "public-ssh-4" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = "22"
  port_range_max    = "22"
  security_group_id = openstack_networking_secgroup_v2.public-ssh.id
}

resource "openstack_networking_secgroup_rule_v2" "publich-ssh-6" {
  direction         = "ingress"
  ethertype         = "IPv6"
  protocol          = "tcp"
  port_range_min    = "22"
  port_range_max    = "22"
  security_group_id = openstack_networking_secgroup_v2.public-ssh.id
}
